{"version":3,"sources":["components/Header.js","components/NavBar.js","components/About.js","resources/Constants.js","components/Posts.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","NavBar","_ref","selected","onClickSelect","aboutLinkCls","concat","postsLinkCls","contactLinkCls","react_router_dom","to","onClick","About","Posts","Contact","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setSelected","setState","state","basename","process","components_Header","components_NavBar","react_router","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAUeA,SAPA,WAEb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAASH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,4BAAR,oCCwBfC,SAzBA,SAAAC,GAAiC,IAA9BC,EAA8BD,EAA9BC,SAAUC,EAAoBF,EAApBE,cAOtBC,EAAY,GAAAC,OAND,UAOfD,GALa,UAKGF,EANF,WAMgC,GAE9C,IAAII,EAAY,GAAAD,OATD,UAUfC,GAPa,UAOGJ,EATF,WASgC,GAE9C,IAAIK,EAAc,GAAAF,OAZH,UAejB,OAFEE,GATe,YASGL,EAZJ,WAYoC,GAGnDP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,UAASd,EAAAC,EAAAC,cAAA,QAAMC,UAAWM,EAAcM,QAAS,kBAAMP,EAftD,WAeQ,UACrBR,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,UAASd,EAAAC,EAAAC,cAAA,QAAMC,UAAWQ,EAAcI,QAAS,kBAAMP,EAftD,WAeQ,UACrBR,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,YAAWd,EAAAC,EAAAC,cAAA,QAAMC,UAAWS,EAAgBG,QAAS,kBAAMP,EAfxD,aAeQ,eCdVQ,QAPD,WAEZ,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAOH,EAAAC,EAAAC,cAAA,SCPP,kMCaNe,EAVD,WAEZ,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,oCAAR,UAAZ,KACAJ,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,uCAAR,UAAZ,0BAA2FJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,qCAAR,QAA3F,OCMOc,EAXC,WAEd,OACIlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,6CAAR,aACHJ,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,+BAAR,WACHJ,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,iCAAR,oBC6BIe,qBA3Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,YAAc,SAACrB,GACbc,EAAKQ,SAAS,CAAEtB,SAAUA,KAN1Bc,EAAKS,MAAQ,CACXvB,SAAU,IAHKc,wEAYjB,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAekB,SAAUC,uBACvBhC,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAD,CAAQ1B,cAAegB,KAAKI,YAAarB,SAAUiB,KAAKM,MAAMvB,WAC9DP,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWtB,IACtChB,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWrB,IACtCjB,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWpB,aAtBhCqB,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5557e2dc.chunk.js","sourcesContent":["import React from 'react'\nimport '../styles/Header.scss'\n\nconst Header = () => {\n\n  return (\n      <div className=\"header\"><a href=\"mollieelisabethstein.com\">Mollie Elisabeth Stein</a></div>\n\t\t)\n}\n\nexport default Header","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport '../styles/NavBar.scss'\n\n\nconst NavBar = ( {selected, onClickSelect} ) => {\n\tconst baseCls = 'navbar'\n\tconst active = '--active'\n\tconst about = 'about'\n\tconst posts = 'posts'\n\tconst contact = 'contact'\n\n  let aboutLinkCls = `${baseCls}`;\n  aboutLinkCls += selected === about ? active : '';\n\n  let postsLinkCls = `${baseCls}`;\n  postsLinkCls += selected === posts ? active : '';\n\n  let contactLinkCls = `${baseCls}`;\n  contactLinkCls += selected === contact ? active : '';\n\nreturn (\n\t<div className=\"navbar\">\n\t\t<NavLink to=\"/about\"><span className={aboutLinkCls} onClick={() => onClickSelect(about)}>ABOUT</span></NavLink>\n\t\t<NavLink to=\"/posts\"><span className={postsLinkCls} onClick={() => onClickSelect(posts)}>POSTS</span></NavLink>\n\t\t<NavLink to=\"/contact\"><span className={contactLinkCls} onClick={() => onClickSelect(contact)}>CONTACT</span></NavLink>\n\t</div>\n\t);\n};\n\nexport default NavBar\n","import React from 'react'\nimport '../styles/Main.scss'\nimport { about } from '../resources/Constants'\n\nconst About = () => {\n\n  return (\n      <div className=\"main\"><p>{about}</p></div>\n\t\t)\n}\n\nexport default About","export const about = 'I am a backend focused developer and my main language is Java but Iâ€™ve also programmed in JavaScript, Kotlin, Python, and Ruby. In my free time I bake, practice yoga, and play piano.';\n","import React from 'react'\nimport '../styles/Main.scss'\n\nconst Posts = () => {\n\n  return (\n      <div className=\"main\">\n        <p>Posts on <a href=\"https://medium.com/@mollie.stein\">Medium</a>.</p>\n        <p>Posts on <a href=\"https://medium.com/@mollie.stein.gm\">Medium</a> on the Giant Machines <a href=\"https://medium.com/giant-machines\">Blog</a>.</p>\n      </div>\n\t\t)\n}\n\nexport default Posts","import React from 'react'\nimport '../styles/Main.scss'\n\nconst Contact = () => {\n\n  return (\n      <div className=\"main\">\n        <p><a href=\"https://www.linkedin.com/in/mollie-stein/\">LinkedIn</a></p>\n        <p><a href=\"https://github.com/mess3109\">Github</a></p>\n        <p><a href=\"mailto:mollie.stein@gmail.com\">E-mail</a></p>\n      </div>\n\t\t)\n}\n\nexport default Contact","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport NavBar from './components/NavBar';\nimport About from './components/About';\nimport Posts from './components/Posts';\nimport Contact from './components/Contact';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      selected: '',\n    }\n  }\n\n  setSelected = (selected) => {\n    this.setState({ selected: selected });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <BrowserRouter basename={process.env.PUBLIC_URL} >\n          <Header />\n          <NavBar onClickSelect={this.setSelected} selected={this.state.selected}/>\n          <Route exact path=\"/about\" component={About} />\n          <Route exact path=\"/posts\" component={Posts} />\n          <Route exact path=\"/contact\" component={Contact} />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}